package by.pvt.resource.pool;

import java.util.Queue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.LinkedList;
import by.pvt.resource.exception.OperatorException;

public class CallCenter<T> {
	private final static int POOL_SIZE = 5;
	private final Semaphore semaphore = new Semaphore(POOL_SIZE, true);
	private final Queue<T> operators = new LinkedList<T>();

	public CallCenter(Queue<T> operator) {
		operators.addAll(operator);
	}

	public T getOperator(long maxWaitMillis) throws OperatorException {
		try {
			if (semaphore.tryAcquire(maxWaitMillis, TimeUnit.MILLISECONDS)) {
				T oper = operators.poll();
				return oper;
			}
		} catch (InterruptedException e) {
			throw new OperatorException(e);
		}
		throw new OperatorException("out of time");
	}

	public void returnResource(T res) {
		operators.add(res);
		semaphore.release();
	}
}