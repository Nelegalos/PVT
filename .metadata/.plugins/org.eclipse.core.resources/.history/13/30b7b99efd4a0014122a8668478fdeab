package by.pvt.epam.command;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

import by.pvt.epam.entity.Employee;
import by.pvt.epam.entity.Flight;
import by.pvt.epam.exception.DAOException;
import by.pvt.epam.resource.ConfigurationManager;
import by.pvt.epam.service.CrewService;
import by.pvt.epam.service.FlightService;

public class FormTeamCommand implements ActionCommand {

	private static final Logger LOGGER = Logger
			.getLogger(FormTeamCommand.class);
	private static final String SESSION_ATTRIBUTE_NAME_FLIGHT_ID = "flightId";
	private static final String SESSION_ATTRIBUTE_CREW = "crew";
	private static final String SESSION_ATTRIBUTE_NAME_FLIGHTS_PAGE = "flightsPage";
	private static final String REQUEST_ATTRIBUTE_NAME_IS_PREVIOUS_FLIGHTS_PAGE = "isPreviousFlightsPage";
	private static final String REQUEST_ATTRIBUTE_NAME_IS_NEXT_FLIGHTS_PAGE = "isNextFlightsPage";
	private static final String REQUEST_ATTRIBUTE_NAME_USER_FLIGHTS = "userFlights";
	private static final String REQUEST_ATTRIBUTE_TEAM_EMPTY = "teamEmpty";
	private static final String REQUEST_ATTRIBUTE_TEAM_NOT_FORMED = "teamNotFormed";
	private static final String REQUEST_ATTRIBUTE_TEAM_FORMED = "teamFormed";

	@SuppressWarnings("unchecked")
	@Override
	public String execute(HttpServletRequest request) {

		List<Employee> crew = (List<Employee>) request.getSession()
				.getAttribute(SESSION_ATTRIBUTE_CREW);
		if (!isTeamFormed(crew)) {
			request.setAttribute(REQUEST_ATTRIBUTE_TEAM_EMPTY, "team.empty");
			return ConfigurationManager.getProperty("path.page.team");
		}
		try {
			int flightId = (Integer) request.getSession().getAttribute(
					SESSION_ATTRIBUTE_NAME_FLIGHT_ID);
			formCrew(crew, flightId);
			setCrewOnAir(crew);
			setFlightOnAir(flightId);
			FlightService flightService = new FlightService();
			List<Flight> newFlights = flightService.findFlightsByStatus(0, 0);
			request.setAttribute(REQUEST_ATTRIBUTE_NAME_USER_FLIGHTS,
					newFlights);
			request.setAttribute(REQUEST_ATTRIBUTE_TEAM_FORMED, "team.formed");
			request.getSession().setAttribute(
					SESSION_ATTRIBUTE_NAME_FLIGHTS_PAGE, 0);
			request.setAttribute(
					REQUEST_ATTRIBUTE_NAME_IS_PREVIOUS_FLIGHTS_PAGE, false);
			request.setAttribute(REQUEST_ATTRIBUTE_NAME_IS_NEXT_FLIGHTS_PAGE,
					isNextFlightsPage());
		} catch (DAOException e) {
			request.setAttribute(REQUEST_ATTRIBUTE_TEAM_NOT_FORMED,
					"team.empty");
			LOGGER.error("TechnicalException", e);
		}
		return ConfigurationManager.getProperty("path.page.dispatcher");
	}

	private boolean isTeamFormed(List<Employee> crew) {
		for (Employee employee : crew) {
			int id = employee.getId();
			if (id == 0) {
				return false;
			}
		}
		return true;
	}

	private boolean isNextFlightsPage() throws DAOException {
		FlightService flightService = new FlightService();
		return (flightService.findFlightsByStatus(0, 2)).size() > 0;
	}

	private void setCrewOnAir(List<Employee> crew) throws DAOException {
		CrewService crewService = new CrewService();
		for (Employee employee : crew) {
			int id = employee.getId();
			boolean flag = crewService.addToFlight(id);
			if (!flag) {
				throw new DAOException();
			}
		}
	}

	private void formCrew(List<Employee> crew, int flightId)
			throws DAOException {
		CrewService crewService = new CrewService();
		boolean flag = crewService.formCrew(flightId, crew);
		if (!flag) {
			throw new DAOException();
		}
	}

	private void setFlightOnAir(int flightId) throws DAOException {
		FlightService flightService = new FlightService();
		boolean flag = flightService.setFlightOnAir(flightId);
		if (!flag) {
			throw new DAOException();
		}
	}
}
