STARTING APPLICATION..

The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
	}
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
STARTING APPLICATION..

The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
	}
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
STARTING APPLICATION..

The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
	}
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
STARTING APPLICATION..

The
if-the
n
Statement
The
ifthen
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
	}
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed

currentSpeed--
;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces 

if
(isMoving
)

currentSpeed--
;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {

System.err.println("Th
e
bicycle
has
already
stopped!")
;
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {

int
testscore

=
76
;

char
grade
;
        if (testscore >= 90) {

grade

=
'A'
;
        } else if (testscore >= 80) {

grade

=
'B'
;
        } else if (testscore >= 70) {

grade

=
'C'
;
        } else if (testscore >= 60) {

grade

=
'D'
;
        } else {

grade

=
'F'
;
        }

System.out.println("Grad
e

=

"

+
grade)
;
    }
}
The
output
from
the
program
is
:

Grade

=
C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed

currentSpeed--
;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces 

if
(isMoving
)

currentSpeed--
;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {

System.err.println("Th
e
bicycle
has
already
stopped!")
;
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {

int
testscore

=
76
;

char
grade
;
        if (testscore >= 90) {

grade

=
'A'
;
        } else if (testscore >= 80) {

grade

=
'B'
;
        } else if (testscore >= 70) {

grade

=
'C'
;
        } else if (testscore >= 60) {

grade

=
'D'
;
        } else {

grade

=
'F'
;
        }

System.out.println("Grad
e

=

"

+
grade)
;
    }
}
The
output
from
the
program
is
:

Grade

=
C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces 

if
(isMoving
)

currentSpeed--
;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {

System.err.println("Th
e
bicycle
has
already
stopped!")
;
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {

int
testscore

=
76
;

char
grade
;
        if (testscore >= 90) {

grade

=
'A'
;
        } else if (testscore >= 80) {

grade

=
'B'
;
        } else if (testscore >= 70) {

grade

=
'C'
;
        } else if (testscore >= 60) {

grade

=
'D'
;
        } else {

grade

=
'F'
;
        }

System.out.println("Grad
e

=

"

+
grade)
;
    }
}
The
output
from
the
program
is
:

Grade

=
C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces 

if
(isMoving
)

currentSpeed--
;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;

char
grade
;
        if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces 

if
(isMoving
)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;

char
grade
;
        if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;

char
grade
;
        if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {

currentSpeed--
;
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;

char
grade
;
        if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;

char
grade
;
        if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(grad
e

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed

(
grade

=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed

(
grade
=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
if-the
n
and
if-then-els
e
Statements
The
if-the
n
Statement
The
if-the
n
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(meanin
g
that
the
bicycle
is
not
in
motion)
,
control
jumps
to
the
end
of
the
if-the
n
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you'l
l
just
get
the
wrong
results
.
The
if-then-els
e
Statement
The
if-then-els
e
statement
provides
a
secondary
path
of
execution
when
an
"if
"
clause
evaluates
to
false
.
You
could
use
an
if-then-els
e
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(
grade
=
'C';
)
and
the
remaining
conditions
are
not
evaluated
.
The
The
if-then
and
if-then-else
Statements
and
The
if-then
and
if-then-else
Statements
Statements
The
The
if-then
Statement
Statement
The
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
statement
is
the
most
basic
of
all
the
control
flow
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
For
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
speed
only
if
the
bicycle
is
already
in
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
One
possible
implementation
of
the
applyBrakes
method
could
be
as
The
if-then
statement
is
the
most
basic
of
all
the
control
flow
statements.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true.
For
example,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle's
speed
only
if
the
bicycle
is
already
in
motion.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
If
this
test
evaluates
to
false
(meaning
that
the
bicycle
is
not
in
motion),
control
jumps
to
the
end
of
the
if-then
statement.
that
the
bicycle
is
not
in
If
this
test
evaluates
to
false
(meaning
that
the
bicycle
is
not
in
motion),
control
jumps
to
the
end
of
the
if-then
statement.
control
jumps
to
the
end
of
the
If
this
test
evaluates
to
false
(meaning
that
the
bicycle
is
not
in
motion),
control
jumps
to
the
end
of
the
if-then
statement.
If
this
test
evaluates
to
false
(meaning
that
the
bicycle
is
not
in
motion),
control
jumps
to
the
end
of
the
if-then
statement.
In
In
addition,
the
opening
and
closing
braces
are
optional,
provided
that
the
"then"
clause
contains
only
one
statement:
the
opening
and
closing
braces
are
In
addition,
the
opening
and
closing
braces
are
optional,
provided
that
the
"then"
clause
contains
only
one
statement:
provided
that
the
In
addition,
the
opening
and
closing
braces
are
optional,
provided
that
the
"then"
clause
contains
only
one
statement:
clause
contains
only
one
In
addition,
the
opening
and
closing
braces
are
optional,
provided
that
the
"then"
clause
contains
only
one
statement:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
Omitting
them
can
make
the
code
more
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
If
a
second
statement
is
later
added
to
the
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
a
common
mistake
would
be
forgetting
to
add
the
newly
required
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
The
compiler
cannot
catch
this
sort
of
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
just
get
the
wrong
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste.
Omitting
them
can
make
the
code
more
brittle.
If
a
second
statement
is
later
added
to
the
"then"
clause,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces.
The
compiler
cannot
catch
this
sort
of
error;
you'll
just
get
the
wrong
results.
The
The
if-then-else
Statement
Statement
The
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
statement
provides
a
secondary
path
of
execution
when
an
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
clause
evaluates
to
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
You
could
use
an
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
In
this
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
The
if-then-else
statement
provides
a
secondary
path
of
execution
when
an
"if"
clause
evaluates
to
false.
You
could
use
an
if-then-else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion.
In
this
case,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
assigns
a
grade
based
on
the
value
of
a
test
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
an
A
for
a
score
of
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
or
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
a
B
for
a
score
of
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
or
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
and
so
The
following
program,
IfElseDemo,
assigns
a
grade
based
on
the
value
of
a
test
score:
an
A
for
a
score
of
90%
or
above,
a
B
for
a
score
of
80%
or
above,
and
so
on.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
The
output
from
the
program
is:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
76
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
70
and
76
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
once
a
condition
is
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
the
appropriate
statements
are
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
and
the
remaining
conditions
are
not
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement:
76
>=
70
and
76
>=
60.
However,
once
a
condition
is
satisfied,
the
appropriate
statements
are
executed(grade
=
'C';)
and
the
remaining
conditions
are
not
evaluated.
The
if
-
then
and
if
-
then
-
else
Statements
The
if
-
then
Statement
The
if
-
then
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle
'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(
meaning
that
the
bicycle
is
not
in
motion
)
,
control
jumps
to
the
end
of
the
if
-
then
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"
then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"
then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you
'
ll
just
get
the
wrong
results
.
The
if
-
then
-
else
Statement
The
if
-
then
-
else
statement
provides
a
secondary
path
of
execution
when
an
"
if
"
clause
evaluates
to
false
.
You
could
use
an
if
-
then
-
else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(
grade
=
'
C
'
;
)
and
the
remaining
conditions
are
not
evaluated
.
The
if
-
then
and
if
-
then
-
else
Statements
The
if
-
then
Statement
The
if
-
then
statement
is
the
most
basic
of
all
the
control
flow
statements
.
It
tells
your
program
to
execute
a
certain
section
of
code
only
if
a
particular
test
evaluates
to
true
.
For
example
,
the
Bicycle
class
could
allow
the
brakes
to
decrease
the
bicycle
'
s
speed
only
if
the
bicycle
is
already
in
motion
.
One
possible
implementation
of
the
applyBrakes
method
could
be
as
follows
:
void applyBrakes() {
    // the "if" clause: bicycle must be moving
    if (isMoving){ 
        // the "then" clause: decrease current speed
	currentSpeed--;
    }
}
If
this
test
evaluates
to
false
(
meaning
that
the
bicycle
is
not
in
motion
)
,
control
jumps
to
the
end
of
the
if
-
then
statement
.
In
addition
,
the
opening
and
closing
braces
are
optional
,
provided
that
the
"
then
"
clause
contains
only
one
statement
:
void applyBrakes() {
    // same as above, but without braces
    	if (isMoving)
    	currentSpeed--;
}
Deciding
when
to
omit
the
braces
is
a
matter
of
personal
taste
.
Omitting
them
can
make
the
code
more
brittle
.
If
a
second
statement
is
later
added
to
the
"
then
"
clause
,
a
common
mistake
would
be
forgetting
to
add
the
newly
required
braces
.
The
compiler
cannot
catch
this
sort
of
error
;
you
'
ll
just
get
the
wrong
results
.
The
if
-
then
-
else
Statement
The
if
-
then
-
else
statement
provides
a
secondary
path
of
execution
when
an
"
if
"
clause
evaluates
to
false
.
You
could
use
an
if
-
then
-
else
statement
in
the
applyBrakes
method
to
take
some
action
if
the
brakes
are
applied
when
the
bicycle
is
not
in
motion
.
In
this
case
,
the
action
is
to
simply
print
an
error
message
stating
that
the
bicycle
has
already
stopped
.
void applyBrakes() {
    if (isMoving) {
    currentSpeed--;	
    } else {
    	System.err.println("The bicycle has already stopped!");
    } 
}
The
following
program
,
IfElseDemo
,
assigns
a
grade
based
on
the
value
of
a
test
score
:
an
A
for
a
score
of
90
%
or
above
,
a
B
for
a
score
of
80
%
or
above
,
and
so
on
.
class IfElseDemo {
    public static void main(String[] args) {
    	int testscore = 76;	
    	char grade;		
    	if (testscore >= 90) {
        	grade = 'A';
        } else if (testscore >= 80) {
        	grade = 'B';
        } else if (testscore >= 70) {
        	grade = 'C';
        } else if (testscore >= 60) {
        	grade = 'D';
        } else {
        	grade = 'F';
        }
        	System.out.println("Grade = " + grade);
    }
}
The
output
from
the
program
is
:
	Grade = C
You
may
have
noticed
that
the
value
of
testscore
can
satisfy
more
than
one
expression
in
the
compound
statement
:
76
>
=
70
and
76
>
=
60
.
However
,
once
a
condition
is
satisfied
,
the
appropriate
statements
are
executed
(
grade
=
'
C
'
;
)
and
the
remaining
conditions
are
not
evaluated
.
