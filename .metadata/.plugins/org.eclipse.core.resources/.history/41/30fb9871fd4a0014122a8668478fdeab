package by.pvt.epam.command;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.apache.log4j.Logger;
import by.pvt.epam.entity.Flight;
import by.pvt.epam.exception.DAOException;
import by.pvt.epam.resource.ConfigurationManager;
import by.pvt.epam.service.FlightService;

public class AddFlightCommand implements ActionCommand {
	private static Logger logger = Logger.getLogger(AddFlightCommand.class);
	private static final String PARAM_NAME_FLIGHT_ID = "addedflight";
	private static final String PARAM_NAME_TO = "to";
	private static final String PARAM_NAME_FROM = "from";
	private static final String PARAM_NAME_DATE = "date";
	private static final String PARAM_NAME_PLANE_ID = "plane";
	private static final String REQUEST_ATTRIBUTE_NAME_FLIGHT_ADDED = "flightAdded";
	private static final String REQUEST_ATTRIBUTE_NAME_FLIGHT_NOT_ADDED = "flightNotAdded";

	@Override
	public String execute(HttpServletRequest request) {
		String flightId = request.getParameter(PARAM_NAME_FLIGHT_ID);
		String to = request.getParameter(PARAM_NAME_TO);
		String from = request.getParameter(PARAM_NAME_FROM);
		String date = request.getParameter(PARAM_NAME_DATE);
		String plane = request.getParameter(PARAM_NAME_PLANE_ID);
		try {
			addFlight(flightId, to, from, date, plane);
			request.setAttribute(REQUEST_ATTRIBUTE_NAME_FLIGHT_ADDED,
					"flight.added");
		} catch (DAOException e) {
			logger.error("TechnicalException", e);
			request.setAttribute(REQUEST_ATTRIBUTE_NAME_FLIGHT_NOT_ADDED,
					"flight.notadded");
		}
		return ConfigurationManager.getProperty("path.page.admin");
	}

	private void addFlight(String idInput, String to, String from,
			String dateInput, String planeInput) throws DAOException {
		boolean flag = false;
		if (isEmpty(to, from, dateInput)) {
			throw new DAOException();
		}
		int flightId;
		int plane;
		try {
			flightId = Integer.valueOf(idInput);
			plane = Integer.valueOf(planeInput);
		} catch (IllegalArgumentException e) {
			throw new DAOException();
		}
		FlightService flightService = new FlightService();
		List<Flight> allFlights = flightService.findAllFlights();
		for (Flight flight : allFlights) {
			if (flightId == flight.getId()) {
				throw new DAOException();
			}
		}
		flag = flightService.addFlight(flightId, to, from, dateInput, plane);
		if (!flag) {
			throw new DAOException();
		}
	}

	private boolean isEmpty(String to, String from, String dateInput) {
		return to.isEmpty() || from.isEmpty() || dateInput.isEmpty();
	}

}
