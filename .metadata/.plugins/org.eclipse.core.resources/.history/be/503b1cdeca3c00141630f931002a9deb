package by.pvt.epam.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.epam.project.database.connection.PoolSingleton;
import com.epam.project.database.dao.util.StatementCloseUtil;
import com.epam.project.entity.users.Admin;
import com.epam.project.entity.users.Student;
import com.epam.project.entity.users.Tutor;
import com.epam.project.exceptions.LogicException;
import com.epam.project.exceptions.TechnicalException;

import by.pvt.epam.entity.User;

public class UserDAOImpl extends UserDAO {
	
	private static final String SQL_QUERY_GET_USER = "SELECT login, name, surname, role_id FROM user WHERE login = ( SELECT login FROM user WHERE (login = ?) AND (password = ?))";

		
	public User getUser(String login, String password)
			throws TechnicalException, LogicException {
		Connection connection = null;
		PreparedStatement statementPeople = null;
		User user = null;
		try {
			connection = PoolSingleton.INSTANCE.getInstance().getConnection();
			statementPeople = connection.prepareStatement(SQL_QUERY_GET_USER);
			statementPeople.setString(1, login);
			statementPeople.setString(2, password);
			statementPeople.executeQuery();
			ResultSet rsPeopleId = statementPeople.executeQuery();
			rsPeopleId.next();
			user = initUser(user, rsPeopleId);

		} catch (SQLException e) {
			throw new TechnicalException(e);
		} catch (LogicException e) {
			throw new LogicException(e);
		} finally {
			StatementCloseUtil.close(statementPeople);
			PoolSingleton.INSTANCE.getInstance().closeConnection(connection);
		}
		return user;
	}

	private User initUser(User user, ResultSet rsPeopleId)
			throws LogicException, SQLException {
		int peopleId = rsPeopleId.getInt(1);
		String firstName = rsPeopleId.getString(2);
		String lastName = rsPeopleId.getString(3);
		int role = rsPeopleId.getInt(4);
		String other = rsPeopleId.getString(5);
		switch (role) {
		case 1:
			user = new Admin(firstName, lastName, peopleId);
			((Admin) user).setPhone(other);
			break;
		case 2:
			user = new Tutor(firstName, lastName, peopleId);
			if (other.equals("")) {
				other = "0";
			}
			((Tutor) user).setExperience(Integer.parseInt(other));
			break;
		case 3:
			user = new Student(firstName, lastName, peopleId);
			((Student) user).setUniversity(other);
			break;
		default:
			throw new LogicException("Unknown User Index");
		}
		return user;
	}

}
