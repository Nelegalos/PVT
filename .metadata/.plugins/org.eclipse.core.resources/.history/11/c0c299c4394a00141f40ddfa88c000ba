package by.pvt.epam.command;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

import by.pvt.epam.entity.Employee;
import by.pvt.epam.entity.Flight;
import by.pvt.epam.entity.Plane;
import by.pvt.epam.entity.Position;
import by.pvt.epam.exception.DAOException;
import by.pvt.epam.resource.ConfigurationManager;
import by.pvt.epam.service.CrewService;
import by.pvt.epam.service.FlightService;

public class TeamCommand implements ActionCommand {

	private static Logger logger = Logger.getLogger(TeamCommand.class);
	private static final String PARAM_NAME_FLIGHT_ID = "flight";
	private static final String REQUEST_ATTRIBUTE_NAME_FLIGHT_ID = "flightId";
	private static final String REQUEST_ATTRIBUTE_NAME_EMPLOYEES = "employees";
	private static final String SESSION_ATTRIBUTE_NAME_PILOT = "pilot";
	private static final String SESSION_ATTRIBUTE_NAME_NAVIGATOR = "navigator";
	private static final String SESSION_ATTRIBUTE_NAME_RADIOMAN = "radioman";
	private static final String SESSION_ATTRIBUTE_NAME_STEWARD = "steward";
	private static final String REQUEST_ATTRIBUTE_TEAM_NOT_FORMED = "teamNotFormed";

	@Override
	public String execute(HttpServletRequest request) {

		String page = null;
		Flight flight = null;
		try {
			flight = findFlight(request);
			setAttributes(request);
			createCrew(flight, request);
			page = ConfigurationManager.getProperty("path.page.team");
		} catch (DAOException e) {
			logger.error("TechnicalException", e);
			request.setAttribute(REQUEST_ATTRIBUTE_TEAM_NOT_FORMED,
					"team.empty");
			page = ConfigurationManager.getProperty("path.page.dispatcher");
		}
		return page;
	}

	private void setAttributes(HttpServletRequest request) throws DAOException {
		CrewService crewService = new CrewService();
		List<Employee> availableEmployees = crewService
				.findAvailableEmployees();
		request.getSession().setAttribute(REQUEST_ATTRIBUTE_NAME_EMPLOYEES,
				availableEmployees);
		request.getSession()
				.setAttribute(SESSION_ATTRIBUTE_NAME_PILOT, "PILOT");
		request.getSession().setAttribute(SESSION_ATTRIBUTE_NAME_NAVIGATOR,
				"NAVIGATOR");
		request.getSession().setAttribute(SESSION_ATTRIBUTE_NAME_RADIOMAN,
				"RADIOMAN");
		request.getSession().setAttribute(SESSION_ATTRIBUTE_NAME_STEWARD,
				"STEWARD");
	}

	private Flight findFlight(HttpServletRequest request) throws DAOException {
		int flightId = Integer.valueOf(request
				.getParameter(PARAM_NAME_FLIGHT_ID));
		request.setAttribute(REQUEST_ATTRIBUTE_NAME_FLIGHT_ID, flightId);
		FlightService flightService = new FlightService();
		return flightService.findFlightById(flightId);

	}

	private void createCrew(Flight flight, HttpServletRequest request) {
		Plane plane = flight.getPlane();
		List<Employee> flightCrew = new ArrayList<>();
		int pilot = plane.getPilot();
		for (int i = 0; i < pilot; i++) {
			Employee employee = new Employee();
			employee.setPosition(Position.PILOT);
			flightCrew.add(employee);
		}
		int navigator = plane.getNavigator();
		for (int i = 0; i < navigator; i++) {
			Employee employee = new Employee();
			employee.setPosition(Position.NAVIGATOR);
			flightCrew.add(employee);
		}
		int radioman = plane.getRadioman();
		for (int i = 0; i < radioman; i++) {
			Employee employee = new Employee();
			employee.setPosition(Position.RADIOMAN);
			flightCrew.add(employee);
		}
		int steward = plane.getSteward();
		for (int i = 0; i < steward; i++) {
			Employee employee = new Employee();
			employee.setPosition(Position.STEWARD);
			flightCrew.add(employee);
		}
		request.getSession().setAttribute("crew", flightCrew);
	}

}
